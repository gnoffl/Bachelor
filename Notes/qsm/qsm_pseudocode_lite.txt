neighborChordsObj-Function:

0Pre-Steps:
0- Inputchecks
0- Clean "senseless" Inputs
0- Add an identifier ID, because depending on the model
	a few switch-ups in the data will be done

%% Procedure: %%

predictions_stored <- predict(model, data) 							%get original predicted classes
predictions_stored <- (predictions_stored, id) 							%mark which prediction belongs to which observation

0data_emp <- (data_emp, id = 0) 									%if additional data is provided for estimating the cumulative distribution function, add id = 0
0data <- (data, data_emp) 									%combine the datasets

0data_store <- data 										%store original data

%% Data Manipulation %%

0for j in 1:nrandom 										%if "method == randomly", multiple repetitions
|	for i in 1:#features 									%manipulate each feature individually
0|	|	if method == all								%if there are ties, all datapoints should be shifted
|	|	|	if q[i] >= 0								%positive q means positive direction of manipulation
|	|	|	|	ecdffn <- ecdf(feature[i])					%estimate ecdf (empirical cumulative distribution function)
|	|	|	|	qtemp <- ecdffn(feature[i]) + q[i]				%calculate ecdf-values between 0 and 1 and add q for corresponding feature
|	|	|	|	feature[i]_manip <- quantile(feature[i], qtemp)			%get quantiles from original data for the new calculated ecdf-values
|	|	|	else
|	|	|	if q[i] < 0								%negative q means negative direction of manipulation
|	|	|	|	ecdffn <- ecdf(-feature[i])					%estimate ecdf (empirical cumulative distribution function) for negative feature
|	|	|	|	qtemp <- ecdffn(-feature[i]) - q[i]				%calculate ecdf-values between 0 and 1 for negative feature and add (substract a negative) q for corresponding feature
|	|	|	|	feature[i]_manip <- -quantile(-feature[i], qtemp)			%get quantiles from negative original data for the new calculated ecdf-values and then flip values back to original scale
|	|	|	end if-else
0|	|	else
0|	|	if method == randomly								%if there are ties, determine a random order and then shift
0|	|	|	data <- data_store							%make sure to get original data back after each repetition
0|	|	|	Nvaltemp <- (data, Nval = #"how often the value of feature[i] exist")	%count how many times the values of feature[i] exists within the complete feature
0|	|	|	v <- variance(feature[i])						%get variance to later determine appropriate amount of jittering
0|	|	|	for all observations: if Nval > 1
0|	|	|	|	feature_new <- feature[i] + runif(-v*10^(-3),+v*10^(-3))	%if value of the observation occurs multiple times, add small number to it (here uniformly distributed random number between -variance*10^(-3) and +variance*10^(-3) -- this might actually become a custom parameter in the future, if this approach does not work in practice)
0|	|	|	for all observations: if Nval = 1
0|	|	|	|	feature_new <- feature[i]					%if value of the observation is unique, do not change it
0|	|	|	end for all observations
0|	|	|
0|	|	|	if q[i] >= 0								%positive q means positive direction of manipulation
0|	|	|	|	ecdffn <- ecdf(feature_new)					%estimate ecdf (empirical cumulative distribution function) for jittered feature
0|	|	|	|	qtemp <- ecdffn(feature_new) + q[i]				%calculate ecdf-values between 0 and 1 and add q for corresponding jittered feature
0|	|	|	|	feature[i]_manip <- quantile(feature_new, qtemp)		%get quantiles from jittered data for the new calculated ecdf-values
0|	|	|	else
0|	|	|	if q[i] < 0								%negative q means negative direction of manipulation
0|	|	|	|	ecdffn <- ecdf(-feature_new)					%estimate ecdf (empirical cumulative distribution function) for negative jittered feature
0|	|	|	|	qtemp <- ecdffn(-feature_new) - q[i]				%calculate ecdf-values between 0 and 1 for negative jittered feature and add (substract a negative) q for corresponding feature
0|	|	|	|	feature[i]_manip <- -quantile(-feature_new, qtemp)		%get quantiles from negative jittered data for the new calculated ecdf-values and then flip values back to original scale
0|	|	|	end if-else
0|	|	|	for m in 1:length(feature_new)						%go thorugh all jittered features
0|	|	|	|	Check jittered value in feature[i]_manip and "translate back"	%reverse the jittering; I made a "look up" table in the steps above with the jittered and original values and here I just look up and replace
0|	|	|	end for
0|	|	end if-else
|	end for every feature
|
|	data[, feature[i]] <- feature[i]_manip							%replace with shifted values
0|	data <- data[id > 0]									%drop additional data for ecdf
|	new_predictions <- predict(model, data)							%get predictions with the new data
0|	if output does not exist
|	|	output <- list(data, predictions_stored, new_predictions, migrationmatrix, manipulations)
0|	else
0|	if output does exist									%starting at second iteration for randomly
0|	|	output <- list(data, predictions_stored, new_predictions, migrationmatrix + output$migrationmatrix, manipulations)
0|	end if-else
0end for every repetition									%just important if method = randomly!

output

%%%%%%%%%%%%%%%%%%%%%%%%%%%%

migrationmatrix means a matrix, which displays all the different target classes in the rows and columns and indicates, how many observations have switched from one class to another (or stayed the same on the diagonal)

